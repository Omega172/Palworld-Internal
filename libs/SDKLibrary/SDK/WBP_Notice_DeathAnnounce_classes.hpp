#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Notice_DeathAnnounce

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Notice_DeathAnnounce.WBP_Notice_DeathAnnounce_C
// 0x00A0 (0x0318 - 0x0278)
class UWBP_Notice_DeathAnnounce_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anm_Loop;                                          // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_out;                                           // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_In;                                            // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_PalRichTextBlock_C*                 BP_PalRichTextBlock;                               // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Base;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Base_Flash;                                  // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Base_Grd;                                    // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BaseLine;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FPalKillLogDisplayData>         DisplayDataList;                                   // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsDisplaying;                                     // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C1[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    PlayerDeathLogMsgID;                               // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    PalDeathLogMsgID;                                  // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        DisplayTime;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NowDisplayingWidgetEndTimer;                       // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NowDisplayingWidgetCloseTimer;                     // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar;                                            // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnmEvent_End_ByTimer();
	void AnmEvent_In_WithEndTimer();
	void Construct();
	void Display(bool* bSuccess);
	void ExecuteUbergraph_WBP_Notice_DeathAnnounce(int32 EntryPoint);
	void OnAddedDeathLog(const struct FPalKillLogDisplayData& DeathLogDisplayData);
	void OnEndCloseAnim();
	void OnInitialized();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ________(const struct FPalKillLogDisplayData& DeathLogDisplayData);
	void _________0(const struct FPalKillLogDisplayData& DeathLogDisplayData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Notice_DeathAnnounce_C">();
	}
	static class UWBP_Notice_DeathAnnounce_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Notice_DeathAnnounce_C>();
	}
};
static_assert(alignof(UWBP_Notice_DeathAnnounce_C) == 0x000008, "Wrong alignment on UWBP_Notice_DeathAnnounce_C");
static_assert(sizeof(UWBP_Notice_DeathAnnounce_C) == 0x000318, "Wrong size on UWBP_Notice_DeathAnnounce_C");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, UberGraphFrame) == 0x000278, "Member 'UWBP_Notice_DeathAnnounce_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Anm_Loop) == 0x000280, "Member 'UWBP_Notice_DeathAnnounce_C::Anm_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Anm_out) == 0x000288, "Member 'UWBP_Notice_DeathAnnounce_C::Anm_out' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Anm_In) == 0x000290, "Member 'UWBP_Notice_DeathAnnounce_C::Anm_In' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, BP_PalRichTextBlock) == 0x000298, "Member 'UWBP_Notice_DeathAnnounce_C::BP_PalRichTextBlock' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Image_Base) == 0x0002A0, "Member 'UWBP_Notice_DeathAnnounce_C::Image_Base' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Image_Base_Flash) == 0x0002A8, "Member 'UWBP_Notice_DeathAnnounce_C::Image_Base_Flash' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Image_Base_Grd) == 0x0002B0, "Member 'UWBP_Notice_DeathAnnounce_C::Image_Base_Grd' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, Image_BaseLine) == 0x0002B8, "Member 'UWBP_Notice_DeathAnnounce_C::Image_BaseLine' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, DisplayDataList) == 0x0002C0, "Member 'UWBP_Notice_DeathAnnounce_C::DisplayDataList' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, bIsDisplaying) == 0x0002D0, "Member 'UWBP_Notice_DeathAnnounce_C::bIsDisplaying' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, PlayerDeathLogMsgID) == 0x0002D8, "Member 'UWBP_Notice_DeathAnnounce_C::PlayerDeathLogMsgID' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, PalDeathLogMsgID) == 0x0002E8, "Member 'UWBP_Notice_DeathAnnounce_C::PalDeathLogMsgID' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, DisplayTime) == 0x0002F8, "Member 'UWBP_Notice_DeathAnnounce_C::DisplayTime' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, NowDisplayingWidgetEndTimer) == 0x000300, "Member 'UWBP_Notice_DeathAnnounce_C::NowDisplayingWidgetEndTimer' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, NowDisplayingWidgetCloseTimer) == 0x000308, "Member 'UWBP_Notice_DeathAnnounce_C::NowDisplayingWidgetCloseTimer' has a wrong offset!");
static_assert(offsetof(UWBP_Notice_DeathAnnounce_C, NewVar) == 0x000310, "Member 'UWBP_Notice_DeathAnnounce_C::NewVar' has a wrong offset!");

}

