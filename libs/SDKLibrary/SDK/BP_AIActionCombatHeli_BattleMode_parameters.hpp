#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIActionCombatHeli_BattleMode

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Pal_structs.hpp"


namespace SDK::Params
{

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionAbort
// 0x0008 (0x0008 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionAbort final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionAbort) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionAbort");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionAbort) == 0x000008, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionAbort");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionAbort, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionAbort::ControlledPawn' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionFinished final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPawnActionResult                             WithResult;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionFinished) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionFinished");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionFinished) == 0x000010, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionFinished");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionFinished, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionFinished::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionFinished, WithResult) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionFinished::WithResult' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionPause
// 0x0008 (0x0008 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionPause final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionPause) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionPause");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionPause) == 0x000008, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionPause");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionPause, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionPause::ControlledPawn' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionResume
// 0x0008 (0x0008 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionResume final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionResume) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionResume");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionResume) == 0x000008, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionResume");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionResume, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionResume::ControlledPawn' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionStart
// 0x0008 (0x0008 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionStart final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionStart) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionStart");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionStart) == 0x000008, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionStart");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionStart, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionStart::ControlledPawn' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ActionTick
// 0x0010 (0x0010 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ActionTick final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ActionTick) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ActionTick");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ActionTick) == 0x000010, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ActionTick");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionTick, ControlledPawn) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionTick::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ActionTick, DeltaSeconds) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_ActionTick::DeltaSeconds' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ChangeAimTarget
// 0x0020 (0x0020 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget final
{
public:
	class AActor*                                 CallFunc_FindTarget_TargetActor;                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_CombatHeli_C*                       K2Node_DynamicCast_AsBP_Combat_Heli;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget) == 0x000020, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget, CallFunc_FindTarget_TargetActor) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget::CallFunc_FindTarget_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget, CallFunc_GetCharacter_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget, K2Node_DynamicCast_AsBP_Combat_Heli) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget::K2Node_DynamicCast_AsBP_Combat_Heli' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeAimTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ChangeMoveDirection
// 0x0008 (0x0008 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection final
{
public:
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection) == 0x000008, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeMoveDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ChangeNextWeapon
// 0x0018 (0x0018 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1818[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalOilrigManager*                      CallFunc_GetOilrigManager_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPalOilrigCombatHeliWeaponType                CallFunc_FindCombatHeliRandomWeza_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon) == 0x000018, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon, CallFunc_GetOilrigManager_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon::CallFunc_GetOilrigManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon, CallFunc_FindCombatHeliRandomWeza_ReturnValue) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_ChangeNextWeapon::CallFunc_FindCombatHeliRandomWeza_ReturnValue' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.CheckPlayerDistanceForBGM
// 0x0050 (0x0050 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1819[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalAIController*                       CallFunc_GetPalAIController_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalBattleManager*                      CallFunc_GetBattleManager_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class APalCharacter*>                  CallFunc_GetAllPlayerCharacters_OutPlayers;        // 0x0028(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181A[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_Target_Validd;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM) == 0x000050, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_GetPalAIController_ReturnValue) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_GetPalAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_GetCharacter_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_GetBattleManager_ReturnValue) == 0x000020, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_GetAllPlayerCharacters_OutPlayers) == 0x000028, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_GetAllPlayerCharacters_OutPlayers' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM, CallFunc_IsValid_Target_Validd) == 0x000049, "Member 'BP_AIActionCombatHeli_BattleMode_C_CheckPlayerDistanceForBGM::CallFunc_IsValid_Target_Validd' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode
// 0x0098 (0x0098 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_5;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_4;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPawnActionResult                             K2Node_Event_WithResult_1;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_ControlledPawn_3;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181E[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPawnAction*                            K2Node_Event_Action;                               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPawnActionResult                             K2Node_Event_WithResult;                           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Valid_Current_Target_Valid;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181F[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1820[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_TempDeltaTime_ImplicitCast;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ActionTick_DeltaSeconds_ImplicitCast;     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode) == 0x000098, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, EntryPoint) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_GetCharacter_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn_5) == 0x000020, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn_5' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn_4) == 0x000028, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn_4' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_WithResult_1) == 0x000030, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_WithResult_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn_3) == 0x000038, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn_3' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn_2) == 0x000040, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_SwitchEnum_CmpSuccess) == 0x000048, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_ControlledPawn_1) == 0x000050, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_Action) == 0x000058, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_Action' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_Event_WithResult) == 0x000060, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_Event_WithResult' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_Is_Valid_Current_Target_Valid) == 0x000061, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_Is_Valid_Current_Target_Valid' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000078, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, K2Node_VariableSet_TempDeltaTime_ImplicitCast) == 0x000080, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::K2Node_VariableSet_TempDeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_ActionTick_DeltaSeconds_ImplicitCast) == 0x000088, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_ActionTick_DeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_Delay_Duration_ImplicitCast) == 0x00008C, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_Delay_Duration_ImplicitCast_1) == 0x000090, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode, CallFunc_Delay_Duration_ImplicitCast_2) == 0x000094, "Member 'BP_AIActionCombatHeli_BattleMode_C_ExecuteUbergraph_BP_AIActionCombatHeli_BattleMode::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.Is Valid Current Target
// 0x0002 (0x0002 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_Target_Validd;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target) == 0x000001, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target) == 0x000002, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target, Valid) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target::Valid' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target, CallFunc_IsValid_Target_Validd) == 0x000001, "Member 'BP_AIActionCombatHeli_BattleMode_C_Is_Valid_Current_Target::CallFunc_IsValid_Target_Validd' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.IsNearTarget2D
// 0x0020 (0x0020 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Near;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1821[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearTwoActor_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1822[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsNearTwoActor_distance_ImplicitCast;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D) == 0x000020, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, Distance) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::Distance' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, Near) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::Near' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, CallFunc_GetCharacter_ReturnValue) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, CallFunc_IsNearTwoActor_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::CallFunc_IsNearTwoActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D, CallFunc_IsNearTwoActor_distance_ImplicitCast) == 0x00001C, "Member 'BP_AIActionCombatHeli_BattleMode_C_IsNearTarget2D::CallFunc_IsNearTwoActor_distance_ImplicitCast' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.OnChildActionFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished final
{
public:
	class UPawnAction*                            Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPawnActionResult                             WithResult;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished) == 0x000010, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished, Action) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished::Action' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished, WithResult) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_OnChildActionFinished::WithResult' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.RayCheckToTarget
// 0x02C0 (0x02C0 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1823[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1824[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1825[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetMuzzleTransform_MzlTF;                 // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1826[0x1];                                     // 0x01D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1827[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1828[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOtomo_ReturnValue;                      // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1829[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalPlayerCharacter*                    K2Node_DynamicCast_AsPal_Player_Character;         // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget) == 0x000010, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget) == 0x0002C0, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, Success) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::Success' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, Temp_object_Variable) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_GetMuzzleTransform_MzlTF) == 0x000040, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_GetMuzzleTransform_MzlTF' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_LineTraceSingle_OutHit) == 0x0000E8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_LineTraceSingle_ReturnValue) == 0x0001D0, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D1, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001D2, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_Time) == 0x0001D4, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_Distance) == 0x0001D8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_Location) == 0x0001E0, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_Normal) == 0x000210, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x000228, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_PhysMat) == 0x000240, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_HitActor) == 0x000248, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_HitComponent) == 0x000250, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_HitBoneName) == 0x000258, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_BoneName) == 0x000260, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_HitItem) == 0x000268, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_ElementIndex) == 0x00026C, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_FaceIndex) == 0x000270, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_TraceStart) == 0x000278, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_BreakHitResult_TraceEnd) == 0x000290, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, CallFunc_IsOtomo_ReturnValue) == 0x0002A8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::CallFunc_IsOtomo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, K2Node_DynamicCast_AsPal_Player_Character) == 0x0002B0, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::K2Node_DynamicCast_AsPal_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget, K2Node_DynamicCast_bSuccess) == 0x0002B8, "Member 'BP_AIActionCombatHeli_BattleMode_C_RayCheckToTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.RemoveAllPlayerTarget
// 0x0048 (0x0048 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalBattleManager*                      CallFunc_GetBattleManager_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class APalCharacter*>                  CallFunc_GetAllPlayerCharacters_OutPlayers;        // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget) == 0x000048, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_GetCharacter_ReturnValue) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_GetBattleManager_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_GetAllPlayerCharacters_OutPlayers) == 0x000020, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_GetAllPlayerCharacters_OutPlayers' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_AIActionCombatHeli_BattleMode_C_RemoveAllPlayerTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.RotateToTarget
// 0x0018 (0x0018 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_RotateToTarget final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GeneralTurnLinearToActor_DeltaTime_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_RotateToTarget) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_RotateToTarget");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_RotateToTarget) == 0x000018, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_RotateToTarget");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RotateToTarget, DeltaTime) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_RotateToTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RotateToTarget, CallFunc_GetCharacter_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_RotateToTarget::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_RotateToTarget, CallFunc_GeneralTurnLinearToActor_DeltaTime_ImplicitCast) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_RotateToTarget::CallFunc_GeneralTurnLinearToActor_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.SetMoveVelocity
// 0x0230 (0x0230 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity final
{
public:
	double                                        DiffZ_TargetToSelf;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpMove;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SlefToTargetDistanceZ0;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ApproachPower;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SelfToTarget;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPos;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SelfPos;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CombatHeli_C*                       K2Node_DynamicCast_AsBP_Combat_Heli;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182C[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalcHeightControl_Result;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182D[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue_1;               // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182E[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue_2;               // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182F[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity) == 0x000230, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, DiffZ_TargetToSelf) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::DiffZ_TargetToSelf' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, UpMove) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::UpMove' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, SlefToTargetDistanceZ0) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::SlefToTargetDistanceZ0' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, ApproachPower) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::ApproachPower' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, SelfToTarget) == 0x000020, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::SelfToTarget' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, TargetPos) == 0x000038, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::TargetPos' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, SelfPos) == 0x000050, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::SelfPos' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_BreakVector_X) == 0x000068, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_BreakVector_Y) == 0x000070, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_BreakVector_Z) == 0x000078, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_GetCharacter_ReturnValue) == 0x000080, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, K2Node_DynamicCast_AsBP_Combat_Heli) == 0x000090, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::K2Node_DynamicCast_AsBP_Combat_Heli' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_CalcHeightControl_Result) == 0x0000A0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_CalcHeightControl_Result' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000D0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0000E8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000100, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_GetCharacter_ReturnValue_1) == 0x000118, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_GetCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Vector_Normal2D_ReturnValue) == 0x000120, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000138, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Cross_VectorVector_ReturnValue) == 0x000150, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000168, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000180, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Add_VectorVector_ReturnValue) == 0x000198, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001B0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001B8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_VSizeXY_ReturnValue) == 0x0001D0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001D8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_GetCharacter_ReturnValue_2) == 0x0001F0, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_GetCharacter_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001F8, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000210, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_IsValid_ReturnValue) == 0x000228, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x00022C, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetMoveVelocity::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.SetupComponent
// 0x0020 (0x0020 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_SetupComponent final
{
public:
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_CombatHeliRpidWeaponComponent_FrontMG_C* CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CombatHeliRpidWeaponComponent_Bomber_C* CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_CombatHeliRpidWeaponComponent_WingMiso_C* CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_SetupComponent");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent) == 0x000020, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_SetupComponent");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent, CallFunc_GetCharacter_ReturnValue) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetupComponent::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetupComponent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetupComponent::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_SetupComponent, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_SetupComponent::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");

// Function BP_AIActionCombatHeli_BattleMode.BP_AIActionCombatHeli_BattleMode_C.TickBP
// 0x0038 (0x0038 - 0x0000)
struct BP_AIActionCombatHeli_BattleMode_C_TickBP final
{
public:
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearTarget2D_Near;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1830[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_GetCharacter_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1831[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AIActionCombatHeli_BattleMode_C_TickBP) == 0x000008, "Wrong alignment on BP_AIActionCombatHeli_BattleMode_C_TickBP");
static_assert(sizeof(BP_AIActionCombatHeli_BattleMode_C_TickBP) == 0x000038, "Wrong size on BP_AIActionCombatHeli_BattleMode_C_TickBP");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_GetCharacter_ReturnValue) == 0x000000, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_IsNearTarget2D_Near) == 0x000008, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_IsNearTarget2D_Near' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_GetCharacter_ReturnValue_1) == 0x000010, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_GetCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AIActionCombatHeli_BattleMode_C_TickBP, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000034, "Member 'BP_AIActionCombatHeli_BattleMode_C_TickBP::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

}

