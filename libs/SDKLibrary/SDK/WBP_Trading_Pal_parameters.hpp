#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Trading_Pal

#include "Basic.hpp"

#include "Pal_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature) == 0x000018, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature, Text) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_12_OnEditableTextBoxChangedEvent__DelegateSignature::Text' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature) == 0x000020, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature, Text) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature::Text' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature, CommitMethod) == 0x000018, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Item_PalEditableTextBox_CostNum_K2Node_ComponentBoundEvent_13_OnEditableTextBoxCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_0_OnHoverSlot__DelegateSignature::Param_Slot' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_1_OnUnhoverSlot__DelegateSignature::Param_Slot' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_5_OnCreatedNewSlot__DelegateSignature::Param_Slot' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature) == 0x000010, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_BoxPalList_Party_K2Node_ComponentBoundEvent_6_OnLeftClickedSlot__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature) == 0x000010, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature, Widget) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_4_OnClickedButton__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature, Widget) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_7_OnHoveredButton__DelegateSignature::Widget' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature, Widget) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalCommonCharacterSlotButton_Edit_K2Node_ComponentBoundEvent_8_OnUnhoveredButton__DelegateSignature::Widget' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature) == 0x000010, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature, Widget) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInGameMenuItemSlotButton_Cost_K2Node_ComponentBoundEvent_9_OnClickedButton__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Lock_K2Node_ComponentBoundEvent_15_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Minus_K2Node_ComponentBoundEvent_11_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Trading_Pal_C_BndEvt__WBP_Trading_Pal_WBP_PalInvisibleButton_Plus_K2Node_ComponentBoundEvent_10_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.CustomNavigation_ToCancel
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_CustomNavigation_ToCancel final
{
public:
	EUINavigation                                 Param_Navigation;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_CustomNavigation_ToCancel) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_CustomNavigation_ToCancel");
static_assert(sizeof(WBP_Trading_Pal_C_CustomNavigation_ToCancel) == 0x000010, "Wrong size on WBP_Trading_Pal_C_CustomNavigation_ToCancel");
static_assert(offsetof(WBP_Trading_Pal_C_CustomNavigation_ToCancel, Param_Navigation) == 0x000000, "Member 'WBP_Trading_Pal_C_CustomNavigation_ToCancel::Param_Navigation' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_CustomNavigation_ToCancel, ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_CustomNavigation_ToCancel::ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Enable Pal Select
// 0x0080 (0x0080 - 0x0000)
struct WBP_Trading_Pal_C_Enable_Pal_Select final
{
public:
	bool                                          EnableBox;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableParty;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDC[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_PalCommonCharacterSlotButton_C*> CallFunc_GetCurrentBoxSlots_Slots;                 // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWBP_PalCommonCharacterSlotButton_C*    CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalCommonCharacterSlotButton_C*    CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterSlot*            CallFunc_GetTargetSlot_targetSlot;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDD[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDE[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterParameter*       CallFunc_TryGetIndividualParameter_ReturnValue;    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFavoritePal_ReturnValue;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BDF[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_Enable_Pal_Select) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_Enable_Pal_Select");
static_assert(sizeof(WBP_Trading_Pal_C_Enable_Pal_Select) == 0x000080, "Wrong size on WBP_Trading_Pal_C_Enable_Pal_Select");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, EnableBox) == 0x000000, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::EnableBox' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, EnableParty) == 0x000001, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::EnableParty' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, Temp_bool_Variable) == 0x000008, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_GetCurrentBoxSlots_Slots) == 0x000020, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_GetCurrentBoxSlots_Slots' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_GetTargetSlot_targetSlot) == 0x000040, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_GetTargetSlot_targetSlot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_IsEmpty_ReturnValue) == 0x000048, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_GetHandle_ReturnValue) == 0x000050, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_GetHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_TryGetIndividualParameter_ReturnValue) == 0x000060, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_TryGetIndividualParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_IsFavoritePal_ReturnValue) == 0x000069, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_IsFavoritePal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Not_PreBool_ReturnValue) == 0x00006A, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, K2Node_Select_Default) == 0x00006B, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Array_Length_ReturnValue_1) == 0x000074, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Enable_Pal_Select, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'WBP_Trading_Pal_C_Enable_Pal_Select::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.ExecuteUbergraph_WBP_Trading_Pal
// 0x02C8 (0x02C8 - 0x0000)
struct WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPalIndividualCharacterSlot* Slot, class UPalIndividualCharacterHandle* LastHandle)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUDDispatchParameter_ItemSearch_C*  CallFunc_CreateDispatchParameterForK2Node_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  CallFunc_Push_ReturnValue;                         // 0x0024(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE1[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Trading_Item_List_C*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE2[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDDispatchParameterBase*           CallFunc_GetParam_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParameter_MapObject*     K2Node_DynamicCast_AsPal_HUDDispatch_Parameter_Map_Object; // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE3[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Slot_3;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterSlot*            CallFunc_GetTargetSlot_targetSlot;                 // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalMapObjectPalBoothModel*             K2Node_DynamicCast_AsPal_Map_Object_Pal_Booth_Model; // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE4[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Slot_2;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_Trading_Item_List_C*>       K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TDelegate<void(int32 TradeIndex)>             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE5[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 Index)>                  K2Node_CreateDelegate_OutputDelegate_3;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Index)>                  K2Node_CreateDelegate_OutputDelegate_4;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE6[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 Index)>                  K2Node_CreateDelegate_OutputDelegate_5;            // 0x00F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_ComponentBoundEvent_Text_1;                 // 0x0108(0x0018)(ConstParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE7[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   K2Node_ComponentBoundEvent_Text;                   // 0x0138(0x0018)(ConstParm)
	ETextCommit                                   K2Node_ComponentBoundEvent_CommitMethod;           // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE8[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Replace_ReturnValue;                      // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumeric_ReturnValue;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BE9[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Widget_3;               // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         K2Node_ComponentBoundEvent_PressType_2;            // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BEA[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Slot_1;                 // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalCommonCharacterSlotButton_C*    K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button; // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BEB[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterSlot*            CallFunc_GetTargetSlot_targetSlot_1;               // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BEC[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BED[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterParameter*       CallFunc_TryGetIndividualParameter_ReturnValue;    // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFavoritePal_ReturnValue;                // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BEE[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Slot;                   // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         K2Node_ComponentBoundEvent_PressType_1;            // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BEF[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Widget_2;               // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalCharacterSlotButtonBase_C*      K2Node_ComponentBoundEvent_Widget_1;               // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPalCharacterManager*                   CallFunc_GetCharacterManager_ReturnValue;          // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemSlotButtonBase_C*           K2Node_ComponentBoundEvent_Widget;                 // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         K2Node_ComponentBoundEvent_PressType;              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidInstanceID_ReturnValue;            // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF0[0x6];                                     // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterParameter*       CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue; // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterHandle*          CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue; // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName StaticItemId)>     K2Node_CreateDelegate_OutputDelegate_6;            // 0x0220(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_2;               // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                  CallFunc_GetLocalPlayerUID_ReturnValue;            // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF1[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x0268(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x0280(0x0004)(NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF2[0x2];                                     // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalMapObjectCharacterContainerModule*  CallFunc_GetCharacterContainerModule_ReturnValue;  // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterContainer*       CallFunc_TryGetContainer_OutContainer;             // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetContainer_ReturnValue;              // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF3[0x6];                                     // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPalIndividualCharacterSlot*>    CallFunc_GetSlots_ReturnValue;                     // 0x02A0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF4[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterSlot*            CallFunc_Array_Get_Item_1;                         // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal");
static_assert(sizeof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal) == 0x0002C8, "Wrong size on WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, EntryPoint) == 0x000000, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_CreateDispatchParameterForK2Node_ReturnValue) == 0x000018, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_CreateDispatchParameterForK2Node_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Push_ReturnValue) == 0x000024, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Push_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Array_Get_Item) == 0x000048, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_int_Array_Index_Variable_1) == 0x000058, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetParam_ReturnValue) == 0x000060, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_AsPal_HUDDispatch_Parameter_Map_Object) == 0x000068, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_AsPal_HUDDispatch_Parameter_Map_Object' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Slot_3) == 0x000078, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Slot_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetTargetSlot_targetSlot) == 0x000080, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetTargetSlot_targetSlot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_AsPal_Map_Object_Pal_Booth_Model) == 0x000088, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_AsPal_Map_Object_Pal_Booth_Model' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Slot_2) == 0x000098, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Slot_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000A0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_MakeArray_Array) == 0x0000B0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000C0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_bool_Variable) == 0x0000D0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000D4, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000E4, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, Temp_bool_Variable_1) == 0x0000F4, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000F8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Text_1) == 0x000108, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Text_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_TextIsEmpty_ReturnValue) == 0x000120, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Conv_TextToString_ReturnValue) == 0x000128, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Text) == 0x000138, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Text' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_CommitMethod) == 0x000150, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_CommitMethod' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Replace_ReturnValue) == 0x000158, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Replace_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000168, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsNumeric_ReturnValue) == 0x000178, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsNumeric_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Conv_StringToInt_ReturnValue) == 0x00017C, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Widget_3) == 0x000180, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Widget_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_PressType_2) == 0x000188, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_PressType_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Slot_1) == 0x000190, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Slot_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button) == 0x000198, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_DynamicCast_bSuccess_2) == 0x0001A0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetTargetSlot_targetSlot_1) == 0x0001A8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetTargetSlot_targetSlot_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsVisible_ReturnValue) == 0x0001B0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetHandle_ReturnValue) == 0x0001B8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsValid_ReturnValue) == 0x0001C0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_TryGetIndividualParameter_ReturnValue) == 0x0001C8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_TryGetIndividualParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsValid_ReturnValue_1) == 0x0001D0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsFavoritePal_ReturnValue) == 0x0001D1, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsFavoritePal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Not_PreBool_ReturnValue) == 0x0001D2, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsEmpty_ReturnValue) == 0x0001D3, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Slot) == 0x0001D8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_PressType_1) == 0x0001E0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_PressType_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Widget_2) == 0x0001E8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Widget_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Widget_1) == 0x0001F0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Widget_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetCharacterManager_ReturnValue) == 0x0001F8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetCharacterManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Widget) == 0x000200, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Widget' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_PressType) == 0x000208, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_PressType' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsValidInstanceID_ReturnValue) == 0x000209, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsValidInstanceID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue) == 0x000210, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue) == 0x000218, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_6) == 0x000220, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Button_2) == 0x000230, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Button_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Button_1) == 0x000238, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Subtract_IntInt_ReturnValue) == 0x000240, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Add_IntInt_ReturnValue_2) == 0x000244, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetLocalPlayerUID_ReturnValue) == 0x000248, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetLocalPlayerUID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000258, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_ComponentBoundEvent_Button) == 0x000260, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_CreateDelegate_OutputDelegate_7) == 0x000268, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_MakeLiteralName_ReturnValue) == 0x000278, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_RegisterActionBinding_ReturnValue) == 0x000280, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_Event_IsDesignTime) == 0x000284, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, K2Node_Select_Default) == 0x000285, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetCharacterContainerModule_ReturnValue) == 0x000288, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetCharacterContainerModule_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_TryGetContainer_OutContainer) == 0x000290, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_TryGetContainer_OutContainer' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_TryGetContainer_ReturnValue) == 0x000298, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_TryGetContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_IsValid_ReturnValue_2) == 0x000299, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_GetSlots_ReturnValue) == 0x0002A0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_GetSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Array_Length_ReturnValue_1) == 0x0002B0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Array_Get_Item_1) == 0x0002B8, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002C0, "Member 'WBP_Trading_Pal_C_ExecuteUbergraph_WBP_Trading_Pal::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnCancelAction
// 0x0004 (0x0004 - 0x0000)
struct WBP_Trading_Pal_C_OnCancelAction final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasKeyboardFocus_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyUserFocus_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnCancelAction) == 0x000001, "Wrong alignment on WBP_Trading_Pal_C_OnCancelAction");
static_assert(sizeof(WBP_Trading_Pal_C_OnCancelAction) == 0x000004, "Wrong size on WBP_Trading_Pal_C_OnCancelAction");
static_assert(offsetof(WBP_Trading_Pal_C_OnCancelAction, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_OnCancelAction::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnCancelAction, CallFunc_HasKeyboardFocus_ReturnValue) == 0x000001, "Member 'WBP_Trading_Pal_C_OnCancelAction::CallFunc_HasKeyboardFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnCancelAction, CallFunc_HasAnyUserFocus_ReturnValue) == 0x000002, "Member 'WBP_Trading_Pal_C_OnCancelAction::CallFunc_HasAnyUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnCancelAction, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'WBP_Trading_Pal_C_OnCancelAction::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnClickedCostSelectSlot
// 0x005C (0x005C - 0x0000)
struct WBP_Trading_Pal_C_OnClickedCostSelectSlot final
{
public:
	class FName                                   StaticItemId;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPalItemId                             K2Node_MakeStruct_PalItemId;                       // 0x0008(0x0028)(NoDestructor, HasGetValueTypeHash)
	struct FPalItemAndNum                         K2Node_MakeStruct_PalItemAndNum;                   // 0x0030(0x002C)(NoDestructor)
};
static_assert(alignof(WBP_Trading_Pal_C_OnClickedCostSelectSlot) == 0x000004, "Wrong alignment on WBP_Trading_Pal_C_OnClickedCostSelectSlot");
static_assert(sizeof(WBP_Trading_Pal_C_OnClickedCostSelectSlot) == 0x00005C, "Wrong size on WBP_Trading_Pal_C_OnClickedCostSelectSlot");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickedCostSelectSlot, StaticItemId) == 0x000000, "Member 'WBP_Trading_Pal_C_OnClickedCostSelectSlot::StaticItemId' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickedCostSelectSlot, K2Node_MakeStruct_PalItemId) == 0x000008, "Member 'WBP_Trading_Pal_C_OnClickedCostSelectSlot::K2Node_MakeStruct_PalItemId' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickedCostSelectSlot, K2Node_MakeStruct_PalItemAndNum) == 0x000030, "Member 'WBP_Trading_Pal_C_OnClickedCostSelectSlot::K2Node_MakeStruct_PalItemAndNum' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnClickedRemoveTradeButton
// 0x0004 (0x0004 - 0x0000)
struct WBP_Trading_Pal_C_OnClickedRemoveTradeButton final
{
public:
	int32                                         TradeIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnClickedRemoveTradeButton) == 0x000004, "Wrong alignment on WBP_Trading_Pal_C_OnClickedRemoveTradeButton");
static_assert(sizeof(WBP_Trading_Pal_C_OnClickedRemoveTradeButton) == 0x000004, "Wrong size on WBP_Trading_Pal_C_OnClickedRemoveTradeButton");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickedRemoveTradeButton, TradeIndex) == 0x000000, "Member 'WBP_Trading_Pal_C_OnClickedRemoveTradeButton::TradeIndex' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnClickSlot
// 0x0088 (0x0088 - 0x0000)
struct WBP_Trading_Pal_C_OnClickSlot final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalCommonCharacterSlotButton_C*    K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF6[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterSlot*            CallFunc_GetTargetSlot_targetSlot;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF7[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF8[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterParameter*       CallFunc_TryGetIndividualParameter_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFavoritePal_ReturnValue;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BF9[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         CallFunc_GetIndividualID_ReturnValue;              // 0x0050(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnClickSlot) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnClickSlot");
static_assert(sizeof(WBP_Trading_Pal_C_OnClickSlot) == 0x000088, "Wrong size on WBP_Trading_Pal_C_OnClickSlot");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_OnClickSlot::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, PressType) == 0x000008, "Member 'WBP_Trading_Pal_C_OnClickSlot::PressType' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button) == 0x000010, "Member 'WBP_Trading_Pal_C_OnClickSlot::K2Node_DynamicCast_AsWBP_Pal_Common_Character_Slot_Button' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Trading_Pal_C_OnClickSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_GetTargetSlot_targetSlot) == 0x000020, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_GetTargetSlot_targetSlot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_GetHandle_ReturnValue) == 0x000030, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_GetHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_TryGetIndividualParameter_ReturnValue) == 0x000040, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_TryGetIndividualParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_IsFavoritePal_ReturnValue) == 0x000049, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_IsFavoritePal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_GetIndividualID_ReturnValue) == 0x000050, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_GetIndividualID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnClickSlot, CallFunc_IsEmpty_ReturnValue) == 0x000080, "Member 'WBP_Trading_Pal_C_OnClickSlot::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnHoverPalSlot
// 0x0030 (0x0030 - 0x0000)
struct WBP_Trading_Pal_C_OnHoverPalSlot final
{
public:
	class UPalIndividualCharacterSlot*            Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BFA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x0024(0x0004)(NoDestructor)
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnHoverPalSlot) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnHoverPalSlot");
static_assert(sizeof(WBP_Trading_Pal_C_OnHoverPalSlot) == 0x000030, "Wrong size on WBP_Trading_Pal_C_OnHoverPalSlot");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, CallFunc_IsEmpty_ReturnValue) == 0x000009, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, CallFunc_MakeLiteralName_ReturnValue) == 0x00000C, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, CallFunc_RegisterActionBinding_ReturnValue) == 0x000024, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPalSlot, CallFunc_GetHandle_ReturnValue) == 0x000028, "Member 'WBP_Trading_Pal_C_OnHoverPalSlot::CallFunc_GetHandle_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnHoverPartyPalSlot
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_OnHoverPartyPalSlot final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterSlot*            CallFunc_GetTargetSlot_targetSlot;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnHoverPartyPalSlot) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnHoverPartyPalSlot");
static_assert(sizeof(WBP_Trading_Pal_C_OnHoverPartyPalSlot) == 0x000010, "Wrong size on WBP_Trading_Pal_C_OnHoverPartyPalSlot");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPartyPalSlot, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_OnHoverPartyPalSlot::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnHoverPartyPalSlot, CallFunc_GetTargetSlot_targetSlot) == 0x000008, "Member 'WBP_Trading_Pal_C_OnHoverPartyPalSlot::CallFunc_GetTargetSlot_targetSlot' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnPrivateLockChanged
// 0x0018 (0x0018 - 0x0000)
struct WBP_Trading_Pal_C_OnPrivateLockChanged final
{
public:
	struct FGuid                                  LockPlayerUId;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnPrivateLockChanged) == 0x000004, "Wrong alignment on WBP_Trading_Pal_C_OnPrivateLockChanged");
static_assert(sizeof(WBP_Trading_Pal_C_OnPrivateLockChanged) == 0x000018, "Wrong size on WBP_Trading_Pal_C_OnPrivateLockChanged");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, LockPlayerUId) == 0x000000, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::LockPlayerUId' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, Temp_bool_Variable) == 0x000010, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, Temp_byte_Variable) == 0x000011, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue) == 0x000013, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnPrivateLockChanged, K2Node_Select_Default) == 0x000014, "Member 'WBP_Trading_Pal_C_OnPrivateLockChanged::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnStoreSlotUpdate
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_OnStoreSlotUpdate final
{
public:
	class UPalIndividualCharacterSlot*            Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterHandle*          LastHandle;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnStoreSlotUpdate) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnStoreSlotUpdate");
static_assert(sizeof(WBP_Trading_Pal_C_OnStoreSlotUpdate) == 0x000010, "Wrong size on WBP_Trading_Pal_C_OnStoreSlotUpdate");
static_assert(offsetof(WBP_Trading_Pal_C_OnStoreSlotUpdate, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_OnStoreSlotUpdate::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnStoreSlotUpdate, LastHandle) == 0x000008, "Member 'WBP_Trading_Pal_C_OnStoreSlotUpdate::LastHandle' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnTradeEdit
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_Trading_Pal_C_OnTradeEdit final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BFB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	TArray<struct FPalPalBoothTradeInfo>          CallFunc_GetTradeInfos_OutTradeInfo;               // 0x0020(0x0010)(ReferenceParm)
	struct FPalPalBoothTradeInfo                  CallFunc_Array_Get_Item;                           // 0x0030(0x0070)()
};
static_assert(alignof(WBP_Trading_Pal_C_OnTradeEdit) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnTradeEdit");
static_assert(sizeof(WBP_Trading_Pal_C_OnTradeEdit) == 0x0000A0, "Wrong size on WBP_Trading_Pal_C_OnTradeEdit");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeEdit, Param_Index) == 0x000000, "Member 'WBP_Trading_Pal_C_OnTradeEdit::Param_Index' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeEdit, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_OnTradeEdit::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeEdit, CallFunc_GetTradeInfos_OutTradeInfo) == 0x000020, "Member 'WBP_Trading_Pal_C_OnTradeEdit::CallFunc_GetTradeInfos_OutTradeInfo' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeEdit, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_Trading_Pal_C_OnTradeEdit::CallFunc_Array_Get_Item' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnTradeHovered
// 0x01C0 (0x01C0 - 0x0000)
struct WBP_Trading_Pal_C_OnTradeHovered final
{
public:
	int32                                         TradeIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BFC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLocalizedText_ReturnValue;             // 0x0008(0x0018)()
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x0038(0x0004)(NoDestructor)
	uint8                                         Pad_3BFD[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Trading_Item_List_C*               CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Vector2D_One_ReturnValue;                 // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPalCharacterManager*                   CallFunc_GetCharacterManager_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPalPalBoothTradeInfo>          CallFunc_GetTradeInfos_OutTradeInfo;               // 0x0068(0x0010)(ReferenceParm)
	struct FPalPalBoothTradeInfo                  CallFunc_Array_Get_Item_1;                         // 0x0078(0x0070)()
	class UPalIndividualCharacterParameter*       CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUICommonItemInfoDisplayData        K2Node_MakeStruct_PalUICommonItemInfoDisplayData;  // 0x00F0(0x00C8)(ContainsInstancedReference)
	class UPalIndividualCharacterHandle*          CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue; // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnTradeHovered) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnTradeHovered");
static_assert(sizeof(WBP_Trading_Pal_C_OnTradeHovered) == 0x0001C0, "Wrong size on WBP_Trading_Pal_C_OnTradeHovered");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, TradeIndex) == 0x000000, "Member 'WBP_Trading_Pal_C_OnTradeHovered::TradeIndex' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetLocalizedText_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetLocalizedText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_MakeLiteralName_ReturnValue) == 0x000020, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'WBP_Trading_Pal_C_OnTradeHovered::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_RegisterActionBinding_ReturnValue) == 0x000038, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_Vector2D_One_ReturnValue) == 0x000048, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_Vector2D_One_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetCharacterManager_ReturnValue) == 0x000058, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetCharacterManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetHUDService_ReturnValue) == 0x000060, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetTradeInfos_OutTradeInfo) == 0x000068, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetTradeInfos_OutTradeInfo' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue) == 0x0000E8, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetIndividualCharacterParameterByIstanceID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, K2Node_MakeStruct_PalUICommonItemInfoDisplayData) == 0x0000F0, "Member 'WBP_Trading_Pal_C_OnTradeHovered::K2Node_MakeStruct_PalUICommonItemInfoDisplayData' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeHovered, CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue) == 0x0001B8, "Member 'WBP_Trading_Pal_C_OnTradeHovered::CallFunc_GetIndividualHandleFromCharacterParameter_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnTradeUnhovered
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_OnTradeUnhovered final
{
public:
	int32                                         TradeIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BFE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnTradeUnhovered) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnTradeUnhovered");
static_assert(sizeof(WBP_Trading_Pal_C_OnTradeUnhovered) == 0x000010, "Wrong size on WBP_Trading_Pal_C_OnTradeUnhovered");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeUnhovered, TradeIndex) == 0x000000, "Member 'WBP_Trading_Pal_C_OnTradeUnhovered::TradeIndex' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnTradeUnhovered, CallFunc_GetHUDService_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_OnTradeUnhovered::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnUnhoverPartyPalSlot
// 0x0008 (0x0008 - 0x0000)
struct WBP_Trading_Pal_C_OnUnhoverPartyPalSlot final
{
public:
	class UWBP_PalCharacterSlotButtonBase_C*      Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnUnhoverPartyPalSlot) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnUnhoverPartyPalSlot");
static_assert(sizeof(WBP_Trading_Pal_C_OnUnhoverPartyPalSlot) == 0x000008, "Wrong size on WBP_Trading_Pal_C_OnUnhoverPartyPalSlot");
static_assert(offsetof(WBP_Trading_Pal_C_OnUnhoverPartyPalSlot, Param_Slot) == 0x000000, "Member 'WBP_Trading_Pal_C_OnUnhoverPartyPalSlot::Param_Slot' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.OnViewDetailInput
// 0x0040 (0x0040 - 0x0000)
struct WBP_Trading_Pal_C_OnViewDetailInput final
{
public:
	class UPalHUDDispatchParameter_MonsterDetail* CallFunc_CreateDispatchParameterForK2Node_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParameter_MonsterDetail* CallFunc_CreateDispatchParameterForK2Node_ReturnValue_1; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BFF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C00[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalUILiftSlotModel*                    CallFunc_GetLiftSlotModel_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLift_ReturnValue;                       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_OnViewDetailInput) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_OnViewDetailInput");
static_assert(sizeof(WBP_Trading_Pal_C_OnViewDetailInput) == 0x000040, "Wrong size on WBP_Trading_Pal_C_OnViewDetailInput");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_CreateDispatchParameterForK2Node_ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_CreateDispatchParameterForK2Node_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_CreateDispatchParameterForK2Node_ReturnValue_1) == 0x000008, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_CreateDispatchParameterForK2Node_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_GetHUDService_ReturnValue) == 0x000018, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_GetLiftSlotModel_ReturnValue) == 0x000028, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_GetLiftSlotModel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_GetHandle_ReturnValue) == 0x000030, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_GetHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsValid_ReturnValue_3) == 0x000038, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsValid_ReturnValue_4) == 0x000039, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsLift_ReturnValue) == 0x00003A, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsLift_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_OnViewDetailInput, CallFunc_IsEmpty_ReturnValue) == 0x00003B, "Member 'WBP_Trading_Pal_C_OnViewDetailInput::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Trading_Pal_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Trading_Pal_C_PreConstruct");
static_assert(sizeof(WBP_Trading_Pal_C_PreConstruct) == 0x000001, "Wrong size on WBP_Trading_Pal_C_PreConstruct");
static_assert(offsetof(WBP_Trading_Pal_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Trading_Pal_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.SetCostSettingNum
// 0x0040 (0x0040 - 0x0000)
struct WBP_Trading_Pal_C_SetCostSettingNum final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C01[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalItemIDManager*                      CallFunc_GetItemIDManager_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalStaticItemDataBase*                 CallFunc_GetStaticItemData_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxStackCount_ReturnValue;             // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C02[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
};
static_assert(alignof(WBP_Trading_Pal_C_SetCostSettingNum) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_SetCostSettingNum");
static_assert(sizeof(WBP_Trading_Pal_C_SetCostSettingNum) == 0x000040, "Wrong size on WBP_Trading_Pal_C_SetCostSettingNum");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, NewNum) == 0x000000, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::NewNum' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_GetItemIDManager_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_GetItemIDManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_GetStaticItemData_ReturnValue) == 0x000010, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_GetStaticItemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_GetMaxStackCount_ReturnValue) == 0x000018, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_GetMaxStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_Min_ReturnValue) == 0x000020, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_Max_ReturnValue) == 0x000024, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_SetCostSettingNum, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'WBP_Trading_Pal_C_SetCostSettingNum::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Setup
// 0x0170 (0x0170 - 0x0000)
struct WBP_Trading_Pal_C_Setup final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalCommonCharacterSlotButton_C*    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C03[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPalIndividualCharacterSlot* Slot, class UPalIndividualCharacterHandle* LastHandle)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalMapObjectCharacterContainerModule*  CallFunc_GetCharacterContainerModule_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C04[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C05[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterContainer*       CallFunc_TryGetContainer_OutContainer;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetContainer_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C06[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPalIndividualCharacterSlot*>    CallFunc_GetSlots_ReturnValue;                     // 0x0058(0x0010)(ReferenceParm)
	class UPalIndividualCharacterSlot*            CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C07[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0088(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x00A8(0x0004)(NoDestructor)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue_1;      // 0x00AC(0x0004)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00B0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_2;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue_2;      // 0x00C8(0x0004)(NoDestructor)
	bool                                          CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue; // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C08[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGuid& PlayerUId)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x00D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x00E0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                Temp_byte_Variable;                                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C09[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalOtomoHolderComponentBase*           CallFunc_GetOtomoHolderComponent_ReturnValue;      // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UPalIndividualCharacterSlot*>    CallFunc_GetSlots_Slots;                           // 0x0110(0x0010)(ReferenceParm)
	class UPalIndividualCharacterSlot*            CallFunc_Array_Get_Item_2;                         // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UWBP_PalCharacterSlotButtonBase_C* Widget)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0128(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UWBP_PalCharacterSlotButtonBase_C* Widget)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x0138(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                Temp_byte_Variable_1;                              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0A[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UWBP_PalCharacterSlotButtonBase_C* Widget, EPalItemSlotPressType PressType)> K2Node_CreateDelegate_OutputDelegate_9;            // 0x014C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                K2Node_Select_Default;                             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0B[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_PalCommonCharacterSlotButton_C*> CallFunc_GetPartySlots_PartySlots;                 // 0x0160(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_Trading_Pal_C_Setup) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_Setup");
static_assert(sizeof(WBP_Trading_Pal_C_Setup) == 0x000170, "Wrong size on WBP_Trading_Pal_C_Setup");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_Trading_Pal_C_Setup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_Trading_Pal_C_Setup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'WBP_Trading_Pal_C_Setup::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Array_Get_Item) == 0x000010, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_GetCharacterContainerModule_ReturnValue) == 0x000030, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_GetCharacterContainerModule_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'WBP_Trading_Pal_C_Setup::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_TryGetContainer_OutContainer) == 0x000048, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_TryGetContainer_OutContainer' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_TryGetContainer_ReturnValue) == 0x000050, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_TryGetContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_GetSlots_ReturnValue) == 0x000058, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_GetSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_1) == 0x000074, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Less_IntInt_ReturnValue_1) == 0x000084, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_2) == 0x000088, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_MakeLiteralName_ReturnValue) == 0x000098, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_MakeLiteralName_ReturnValue_1) == 0x0000A0, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_RegisterActionBinding_ReturnValue) == 0x0000A8, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_RegisterActionBinding_ReturnValue_1) == 0x0000AC, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_RegisterActionBinding_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000B0, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_MakeLiteralName_ReturnValue_2) == 0x0000C0, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_MakeLiteralName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_RegisterActionBinding_ReturnValue_2) == 0x0000C8, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_RegisterActionBinding_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue) == 0x0000CC, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_IsLockedPrivateByLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000D0, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000E0, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000F0, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_byte_Variable) == 0x000100, "Member 'WBP_Trading_Pal_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_GetOtomoHolderComponent_ReturnValue) == 0x000108, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_GetOtomoHolderComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_GetSlots_Slots) == 0x000110, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_GetSlots_Slots' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_Array_Get_Item_2) == 0x000120, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_7) == 0x000128, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_8) == 0x000138, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_byte_Variable_1) == 0x000148, "Member 'WBP_Trading_Pal_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, Temp_bool_Variable) == 0x000149, "Member 'WBP_Trading_Pal_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_CreateDelegate_OutputDelegate_9) == 0x00014C, "Member 'WBP_Trading_Pal_C_Setup::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, K2Node_Select_Default) == 0x00015C, "Member 'WBP_Trading_Pal_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Setup, CallFunc_GetPartySlots_PartySlots) == 0x000160, "Member 'WBP_Trading_Pal_C_Setup::CallFunc_GetPartySlots_PartySlots' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Switch Sell Panel
// 0x0018 (0x0018 - 0x0000)
struct WBP_Trading_Pal_C_Switch_Sell_Panel final
{
public:
	bool                                          ToSellList;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_Switch_Sell_Panel) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_Switch_Sell_Panel");
static_assert(sizeof(WBP_Trading_Pal_C_Switch_Sell_Panel) == 0x000018, "Wrong size on WBP_Trading_Pal_C_Switch_Sell_Panel");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, ToSellList) == 0x000000, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::ToSellList' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_bool_Variable) == 0x000001, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_byte_Variable) == 0x000002, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, K2Node_Select_Default) == 0x000005, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_byte_Variable_2) == 0x000006, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, Temp_byte_Variable_3) == 0x000007, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Switch_Sell_Panel, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000010, "Member 'WBP_Trading_Pal_C_Switch_Sell_Panel::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Toggle Private Lock
// 0x0001 (0x0001 - 0x0000)
struct WBP_Trading_Pal_C_Toggle_Private_Lock final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_Toggle_Private_Lock) == 0x000001, "Wrong alignment on WBP_Trading_Pal_C_Toggle_Private_Lock");
static_assert(sizeof(WBP_Trading_Pal_C_Toggle_Private_Lock) == 0x000001, "Wrong size on WBP_Trading_Pal_C_Toggle_Private_Lock");
static_assert(offsetof(WBP_Trading_Pal_C_Toggle_Private_Lock, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_Toggle_Private_Lock::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.ToNextFocus
// 0x0018 (0x0018 - 0x0000)
struct WBP_Trading_Pal_C_ToNextFocus final
{
public:
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFirstFocusPartyButton_Widget;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_ToNextFocus) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_ToNextFocus");
static_assert(sizeof(WBP_Trading_Pal_C_ToNextFocus) == 0x000018, "Wrong size on WBP_Trading_Pal_C_ToNextFocus");
static_assert(offsetof(WBP_Trading_Pal_C_ToNextFocus, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_ToNextFocus::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ToNextFocus, CallFunc_GetFirstFocusPartyButton_Widget) == 0x000008, "Member 'WBP_Trading_Pal_C_ToNextFocus::CallFunc_GetFirstFocusPartyButton_Widget' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ToNextFocus, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WBP_Trading_Pal_C_ToNextFocus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.ToPrevFocus
// 0x0018 (0x0018 - 0x0000)
struct WBP_Trading_Pal_C_ToPrevFocus final
{
public:
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFirstFocusPartyButton_Widget;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_ToPrevFocus) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_ToPrevFocus");
static_assert(sizeof(WBP_Trading_Pal_C_ToPrevFocus) == 0x000018, "Wrong size on WBP_Trading_Pal_C_ToPrevFocus");
static_assert(offsetof(WBP_Trading_Pal_C_ToPrevFocus, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_ToPrevFocus::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ToPrevFocus, CallFunc_GetFirstFocusPartyButton_Widget) == 0x000008, "Member 'WBP_Trading_Pal_C_ToPrevFocus::CallFunc_GetFirstFocusPartyButton_Widget' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_ToPrevFocus, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WBP_Trading_Pal_C_ToPrevFocus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.ToSetSellPanel
// 0x0070 (0x0070 - 0x0000)
struct WBP_Trading_Pal_C_ToSetSellPanel final
{
public:
	struct FPalPalBoothTradeInfo                  K2Node_MakeStruct_PalPalBoothTradeInfo;            // 0x0000(0x0070)()
};
static_assert(alignof(WBP_Trading_Pal_C_ToSetSellPanel) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_ToSetSellPanel");
static_assert(sizeof(WBP_Trading_Pal_C_ToSetSellPanel) == 0x000070, "Wrong size on WBP_Trading_Pal_C_ToSetSellPanel");
static_assert(offsetof(WBP_Trading_Pal_C_ToSetSellPanel, K2Node_MakeStruct_PalPalBoothTradeInfo) == 0x000000, "Member 'WBP_Trading_Pal_C_ToSetSellPanel::K2Node_MakeStruct_PalPalBoothTradeInfo' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Update Sell List
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_Trading_Pal_C_Update_Sell_List final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_Trading_Item_List_C*               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0E[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalPalBoothTradeInfo>          CallFunc_GetTradeInfos_OutTradeInfo;               // 0x0028(0x0010)(ReferenceParm)
	struct FPalPalBoothTradeInfo                  CallFunc_Array_Get_Item_1;                         // 0x0038(0x0070)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C0F[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterSlot*            CallFunc_GetBoothPalByIndividualId_ReturnValue;    // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C10[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_Update_Sell_List) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_Update_Sell_List");
static_assert(sizeof(WBP_Trading_Pal_C_Update_Sell_List) == 0x0000C0, "Wrong size on WBP_Trading_Pal_C_Update_Sell_List");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_Trading_Pal_C_Update_Sell_List::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_Trading_Pal_C_Update_Sell_List::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000010, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Array_Get_Item) == 0x000018, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_GetTradeInfos_OutTradeInfo) == 0x000028, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_GetTradeInfos_OutTradeInfo' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AC, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_GetBoothPalByIndividualId_ReturnValue) == 0x0000B0, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_GetBoothPalByIndividualId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Update_Sell_List, CallFunc_SelectInt_ReturnValue) == 0x0000BC, "Member 'WBP_Trading_Pal_C_Update_Sell_List::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.Validate Current Trade Info
// 0x0009 (0x0009 - 0x0000)
struct WBP_Trading_Pal_C_Validate_Current_Trade_Info final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidInstanceID_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_Validate_Current_Trade_Info) == 0x000001, "Wrong alignment on WBP_Trading_Pal_C_Validate_Current_Trade_Info");
static_assert(sizeof(WBP_Trading_Pal_C_Validate_Current_Trade_Info) == 0x000009, "Wrong size on WBP_Trading_Pal_C_Validate_Current_Trade_Info");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, Temp_bool_Variable) == 0x000000, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, Temp_byte_Variable) == 0x000001, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, K2Node_Select_Default) == 0x000003, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, CallFunc_IsEmpty_ReturnValue) == 0x000004, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, CallFunc_IsValidInstanceID_ReturnValue) == 0x000005, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::CallFunc_IsValidInstanceID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_Validate_Current_Trade_Info, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_Validate_Current_Trade_Info::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WBP_Trading_Pal.WBP_Trading_Pal_C.BP_GetDesiredFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct WBP_Trading_Pal_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Trading_Pal_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_Trading_Pal_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_Trading_Pal_C_BP_GetDesiredFocusTarget) == 0x000010, "Wrong size on WBP_Trading_Pal_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_Trading_Pal_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_Trading_Pal_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Trading_Pal_C_BP_GetDesiredFocusTarget, CallFunc_IsVisible_ReturnValue) == 0x000008, "Member 'WBP_Trading_Pal_C_BP_GetDesiredFocusTarget::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

}

