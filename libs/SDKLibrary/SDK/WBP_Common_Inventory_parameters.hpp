#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Common_Inventory

#include "Basic.hpp"

#include "Pal_structs.hpp"


namespace SDK::Params
{

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           ButtonBase;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature) == 0x000010, "Wrong size on WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature, ButtonBase) == 0x000000, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature::ButtonBase' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_1_OnRightClickedSlot__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           ButtonBase;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature) == 0x000010, "Wrong size on WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature, ButtonBase) == 0x000000, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature::ButtonBase' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_Common_Inventory_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_8_OnLeftClickedSlot__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalInvisibleButton_Sort_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           ButtonBase;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature, ButtonBase) == 0x000000, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_4_OnHoveredSlot__DelegateSignature::ButtonBase' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           ButtonBase;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature, ButtonBase) == 0x000000, "Member 'WBP_Common_Inventory_C_BndEvt__WBP_IngameMenu_Chest_WBP_PalPlayerInventoryScrollList_K2Node_ComponentBoundEvent_5_OnEndHoveredSlot__DelegateSignature::ButtonBase' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.ExecuteUbergraph_WBP_Common_Inventory
// 0x0040 (0x0040 - 0x0000)
struct WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B83[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalItemSlotButtonBase_C*           K2Node_ComponentBoundEvent_buttonBase;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         K2Node_ComponentBoundEvent_PressType;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B84[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemSlotButtonBase_C*           K2Node_ComponentBoundEvent_buttonBase_3;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemSlotButtonBase_C*           K2Node_ComponentBoundEvent_buttonBase_2;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemSlotButtonBase_C*           K2Node_ComponentBoundEvent_buttonBase_1;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         K2Node_ComponentBoundEvent_PressType_1;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory");
static_assert(sizeof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory) == 0x000040, "Wrong size on WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, EntryPoint) == 0x000000, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_buttonBase) == 0x000008, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_buttonBase' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_PressType) == 0x000010, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_PressType' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_Button) == 0x000018, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_buttonBase_3) == 0x000020, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_buttonBase_3' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_buttonBase_2) == 0x000028, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_buttonBase_2' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_buttonBase_1) == 0x000030, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_buttonBase_1' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory, K2Node_ComponentBoundEvent_PressType_1) == 0x000038, "Member 'WBP_Common_Inventory_C_ExecuteUbergraph_WBP_Common_Inventory::K2Node_ComponentBoundEvent_PressType_1' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.FilteringInventoryByInventoryType
// 0x0018 (0x0018 - 0x0000)
struct WBP_Common_Inventory_C_FilteringInventoryByInventoryType final
{
public:
	TArray<EPalPlayerInventoryType>               InventoryType;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_FilteringFromInventoryType_IsEmptyDisplaySlot; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_FilteringInventoryByInventoryType) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_FilteringInventoryByInventoryType");
static_assert(sizeof(WBP_Common_Inventory_C_FilteringInventoryByInventoryType) == 0x000018, "Wrong size on WBP_Common_Inventory_C_FilteringInventoryByInventoryType");
static_assert(offsetof(WBP_Common_Inventory_C_FilteringInventoryByInventoryType, InventoryType) == 0x000000, "Member 'WBP_Common_Inventory_C_FilteringInventoryByInventoryType::InventoryType' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_FilteringInventoryByInventoryType, CallFunc_FilteringFromInventoryType_IsEmptyDisplaySlot) == 0x000010, "Member 'WBP_Common_Inventory_C_FilteringInventoryByInventoryType::CallFunc_FilteringFromInventoryType_IsEmptyDisplaySlot' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.FilteringInventoryByInventoryTypeA
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA final
{
public:
	TArray<EPalItemTypeA>                         DisplayTypesA;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA");
static_assert(sizeof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA) == 0x000010, "Wrong size on WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA");
static_assert(offsetof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA, DisplayTypesA) == 0x000000, "Member 'WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeA::DisplayTypesA' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.FilteringInventoryByInventoryTypeB
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB final
{
public:
	TArray<EPalItemTypeB>                         DisplayTypesB;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB");
static_assert(sizeof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB) == 0x000010, "Wrong size on WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB");
static_assert(offsetof(WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB, DisplayTypesB) == 0x000000, "Member 'WBP_Common_Inventory_C_FilteringInventoryByInventoryTypeB::DisplayTypesB' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.GetInventoryLastHoveredFocusTarget
// 0x0018 (0x0018 - 0x0000)
struct WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemSlotButtonBase_C*           CallFunc_GetLastHoveredSlotButton_SlotButton;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget");
static_assert(sizeof(WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget) == 0x000018, "Wrong size on WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget, Widget) == 0x000000, "Member 'WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget::Widget' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget, CallFunc_GetLastHoveredSlotButton_SlotButton) == 0x000008, "Member 'WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget::CallFunc_GetLastHoveredSlotButton_SlotButton' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Common_Inventory_C_GetInventoryLastHoveredFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.GetInventoryTopFocustTarget
// 0x0060 (0x0060 - 0x0000)
struct WBP_Common_Inventory_C_GetInventoryTopFocustTarget final
{
public:
	class UWidget*                                FocusTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalPlayerInventoryType                       Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B85[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_PalItemListBlock_C*                CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B86[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_PalItemSlotButtonBase_C*>   CallFunc_GetAllItemSlotButtons_slotButtons;        // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B87[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PalItemSlotButtonBase_C*           CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B88[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_GetInventoryTopFocustTarget");
static_assert(sizeof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget) == 0x000060, "Wrong size on WBP_Common_Inventory_C_GetInventoryTopFocustTarget");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, FocusTarget) == 0x000000, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::FocusTarget' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, Temp_byte_Variable) == 0x000008, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Map_Find_Value) == 0x000018, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_GetAllItemSlotButtons_slotButtons) == 0x000028, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_GetAllItemSlotButtons_slotButtons' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_GetParent_ReturnValue) == 0x000050, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_GetInventoryTopFocustTarget, CallFunc_IsVisible_ReturnValue) == 0x000058, "Member 'WBP_Common_Inventory_C_GetInventoryTopFocustTarget::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.OnHoveredInventorySlot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           SlotButton;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature) == 0x000008, "Wrong size on WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature, SlotButton) == 0x000000, "Member 'WBP_Common_Inventory_C_OnHoveredInventorySlot__DelegateSignature::SlotButton' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.OnLeftClickedTargetContainerSlot
// 0x0030 (0x0030 - 0x0000)
struct WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           ButtonBase;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B89[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalItemSlot*                           CallFunc_GetTargetSlot_targetSlot;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalItemSlotId                         CallFunc_GetSlotId_ReturnValue;                    // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot");
static_assert(sizeof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot) == 0x000030, "Wrong size on WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot, ButtonBase) == 0x000000, "Member 'WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot::ButtonBase' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot, PressType) == 0x000008, "Member 'WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot::PressType' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot, CallFunc_GetTargetSlot_targetSlot) == 0x000010, "Member 'WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot::CallFunc_GetTargetSlot_targetSlot' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot, CallFunc_GetSlotId_ReturnValue) == 0x000018, "Member 'WBP_Common_Inventory_C_OnLeftClickedTargetContainerSlot::CallFunc_GetSlotId_ReturnValue' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.OnLeftClickSlot__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature) == 0x000010, "Wrong size on WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Common_Inventory_C_OnLeftClickSlot__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.OnRightClickSlot__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature final
{
public:
	class UWBP_PalItemSlotButtonBase_C*           Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalItemSlotPressType                         PressType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature");
static_assert(sizeof(WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature) == 0x000010, "Wrong size on WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature");
static_assert(offsetof(WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature, Param_Slot) == 0x000000, "Member 'WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature::Param_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature, PressType) == 0x000008, "Member 'WBP_Common_Inventory_C_OnRightClickSlot__DelegateSignature::PressType' has a wrong offset!");

// Function WBP_Common_Inventory.WBP_Common_Inventory_C.Setup
// 0x0008 (0x0008 - 0x0000)
struct WBP_Common_Inventory_C_Setup final
{
public:
	class UBP_PalInventoryModel_C*                Param_Model;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Common_Inventory_C_Setup) == 0x000008, "Wrong alignment on WBP_Common_Inventory_C_Setup");
static_assert(sizeof(WBP_Common_Inventory_C_Setup) == 0x000008, "Wrong size on WBP_Common_Inventory_C_Setup");
static_assert(offsetof(WBP_Common_Inventory_C_Setup, Param_Model) == 0x000000, "Member 'WBP_Common_Inventory_C_Setup::Param_Model' has a wrong offset!");

}

