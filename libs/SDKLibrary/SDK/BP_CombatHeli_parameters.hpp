#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombatHeli

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_CombatHeli.BP_CombatHeli_C.CalcHeightControl
// 0x0098 (0x0098 - 0x0000)
struct BP_CombatHeli_C_CalcHeightControl final
{
public:
	double                                        TargetHeight;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DiffZ_TargetToSelf;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585C[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585D[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombatHeli_C_CalcHeightControl) == 0x000008, "Wrong alignment on BP_CombatHeli_C_CalcHeightControl");
static_assert(sizeof(BP_CombatHeli_C_CalcHeightControl) == 0x000098, "Wrong size on BP_CombatHeli_C_CalcHeightControl");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, TargetHeight) == 0x000000, "Member 'BP_CombatHeli_C_CalcHeightControl::TargetHeight' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, Result) == 0x000008, "Member 'BP_CombatHeli_C_CalcHeightControl::Result' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, DiffZ_TargetToSelf) == 0x000010, "Member 'BP_CombatHeli_C_CalcHeightControl::DiffZ_TargetToSelf' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_Y) == 0x000038, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_Z) == 0x000040, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000060, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_X_1) == 0x000078, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_Y_1) == 0x000080, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_BreakVector_Z_1) == 0x000088, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_CalcHeightControl, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_CombatHeli_C_CalcHeightControl::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_CombatHeli.BP_CombatHeli_C.ExecuteUbergraph_BP_CombatHeli
// 0x0198 (0x0198 - 0x0000)
struct BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CallFunc_AddComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent_1;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor_1;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp_1;                    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585F[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x0050(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5860[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalPlayerCharacter*                    K2Node_DynamicCast_AsPal_Player_Character;         // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5861[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalPlayerCharacter*                    K2Node_DynamicCast_AsPal_Player_Character_1;       // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5862[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalGameSetting*                        CallFunc_GetGameSetting_ReturnValue;               // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0180(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli) == 0x000008, "Wrong alignment on BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli");
static_assert(sizeof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli) == 0x000198, "Wrong size on BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, EntryPoint) == 0x000000, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, CallFunc_AddComponentByClass_ReturnValue) == 0x000008, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OverlappedComponent_1) == 0x000030, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherActor_1) == 0x000038, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherComp_1) == 0x000040, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherBodyIndex_1) == 0x000048, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_bFromSweep) == 0x00004C, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_SweepResult) == 0x000050, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OverlappedComponent) == 0x000138, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherActor) == 0x000140, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherComp) == 0x000148, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_CustomEvent_OtherBodyIndex) == 0x000150, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_DynamicCast_AsPal_Player_Character) == 0x000158, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_DynamicCast_AsPal_Player_Character' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_DynamicCast_AsPal_Player_Character_1) == 0x000168, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_DynamicCast_AsPal_Player_Character_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, CallFunc_GetGameSetting_ReturnValue) == 0x000178, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::CallFunc_GetGameSetting_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, Temp_delegate_Variable) == 0x000180, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli, CallFunc_PostEvent_ReturnValue) == 0x000190, "Member 'BP_CombatHeli_C_ExecuteUbergraph_BP_CombatHeli::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_CombatHeli.BP_CombatHeli_C.OnHPGaugeCollisionOverlap
// 0x0108 (0x0108 - 0x0000)
struct BP_CombatHeli_C_OnHPGaugeCollisionOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5863[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap) == 0x000008, "Wrong alignment on BP_CombatHeli_C_OnHPGaugeCollisionOverlap");
static_assert(sizeof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap) == 0x000108, "Wrong size on BP_CombatHeli_C_OnHPGaugeCollisionOverlap");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, OverlappedComponent) == 0x000000, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, OtherActor) == 0x000008, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, OtherComp) == 0x000010, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, bFromSweep) == 0x00001C, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlap, SweepResult) == 0x000020, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlap::SweepResult' has a wrong offset!");

// Function BP_CombatHeli.BP_CombatHeli_C.OnHPGaugeCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd) == 0x000008, "Wrong alignment on BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd");
static_assert(sizeof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd) == 0x000020, "Wrong size on BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'BP_CombatHeli_C_OnHPGaugeCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

}

