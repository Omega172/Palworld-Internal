#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MonsterAIController_Visitor_Guardman

#include "Basic.hpp"

#include "BP_MonsterAIControllerBase_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Pal_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MonsterAIController_Visitor_Guardman.BP_MonsterAIController_Visitor_Guardman_C
// 0x0058 (0x05A8 - 0x0550)
class ABP_MonsterAIController_Visitor_Guardman_C final : public ABP_MonsterAIControllerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MonsterAIController_Visitor_Guardman_C; // 0x0550(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPalAISensorComponent*                  PalAISensor;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GoalLocation;                                      // 0x0560(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnTimeMinutes;                                 // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WalkAreaSplitNum;                                  // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPalIVisitorNPCAction                         ActionTimeLimit;                                   // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_367F[0x7];                                     // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Formation_Offset;                                  // 0x0588(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          VisitorLeader;                                     // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BindArriveEvent(class UBP_AIAction_Visitor_TravelToBaseCamp_Guardman_C* Action);
	void BindOnInvaderArrivedDelegate(TDelegate<void()> Event);
	void BindWaitFinishEvent(class UBP_AIAction_Visitor_WaitInBaseCamp_C* Action);
	void ExecuteUbergraph_BP_MonsterAIController_Visitor_Guardman(int32 EntryPoint);
	void GetLeaderBB(class UBP_PalAIBlackboard_Common_C** LeaderPalBrackboard);
	void GetMyBB(class UBP_PalAIBlackboard_Common_C** PalBrackboard);
	void OnArrivedTargetPoint();
	void OnCombatSquad(class AActor* TargetActor);
	void OnDeadByVisitorLeader(const struct FPalDeadInfo& DeadInfo);
	void OnInvaderArrived();
	void OnReturnSpawnedPointByVisitorLeader();
	void OnStuck();
	void OnWaitFinished();
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReturnSpawnedPoint(const struct FVector& Param_GoalLocation);
	void SetupVisitorLeader();
	void SetupVisitorParameter(const struct FPalVisitorInitParameter& InitParam);
	void StartReturnToSpawnedPointAction();
	void StartTravelToBaseCamp();
	void StartWaitAction();
	void _________1(class APalCharacter* InCharacter);
	void _________OnDead(const struct FPalDeadInfo& DeadInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MonsterAIController_Visitor_Guardman_C">();
	}
	static class ABP_MonsterAIController_Visitor_Guardman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MonsterAIController_Visitor_Guardman_C>();
	}
};
static_assert(alignof(ABP_MonsterAIController_Visitor_Guardman_C) == 0x000008, "Wrong alignment on ABP_MonsterAIController_Visitor_Guardman_C");
static_assert(sizeof(ABP_MonsterAIController_Visitor_Guardman_C) == 0x0005A8, "Wrong size on ABP_MonsterAIController_Visitor_Guardman_C");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, UberGraphFrame_BP_MonsterAIController_Visitor_Guardman_C) == 0x000550, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::UberGraphFrame_BP_MonsterAIController_Visitor_Guardman_C' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, PalAISensor) == 0x000558, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::PalAISensor' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, GoalLocation) == 0x000560, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::GoalLocation' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, ReturnTimeMinutes) == 0x000578, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::ReturnTimeMinutes' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, WalkAreaSplitNum) == 0x00057C, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::WalkAreaSplitNum' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, ActionTimeLimit) == 0x000580, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::ActionTimeLimit' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, Formation_Offset) == 0x000588, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::Formation_Offset' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Visitor_Guardman_C, VisitorLeader) == 0x0005A0, "Member 'ABP_MonsterAIController_Visitor_Guardman_C::VisitorLeader' has a wrong offset!");

}

